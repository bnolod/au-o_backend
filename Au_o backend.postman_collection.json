{
	"info": {
		"_postman_id": "aa3dbb5d-df61-4222-a030-aab63667cee4",
		"name": "Au_o backend",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37001763",
		"_collection_link": "https://auo-dev.postman.co/workspace/cf0f3cb2-83f0-4499-86e9-06c399e77d5b/collection/40973202-aa3dbb5d-df61-4222-a030-aab63667cee4?action=share&source=collection_link&creator=37001763"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "following cucok",
					"item": [
						{
							"name": "get following of user by id (1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response content type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response body is an empty array\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array').that.is.empty;",
											"});",
											"",
											"",
											"pm.test(\"Verify the response array has the expected number of elements\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    pm.expect(responseData).to.have.lengthOf(0);",
											"});",
											"",
											"",
											"pm.test(\"The response array should be an array\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Each item in the array should be an object\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    responseData.forEach(function(item) {",
											"        pm.expect(item).to.be.an('object');",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/api/v1/users/user/1/following",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"user",
										"1",
										"following"
									]
								}
							},
							"response": []
						},
						{
							"name": "get followers of user (id 1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response body is an empty array\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array').that.is.empty;",
											"});",
											"",
											"",
											"pm.test(\"Response array should have the expected length\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    pm.expect(responseData).to.have.length(0);",
											"});",
											"",
											"",
											"pm.test(\"Response body is in the correct format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/api/v1/users/user/3/followers",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"user",
										"3",
										"followers"
									]
								}
							},
							"response": []
						},
						{
							"name": "follow user by id (2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 409\", function () {",
											"  pm.expect(pm.response.code).to.equal(409);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Status field is present in the response\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.have.property('status');",
											"});",
											"",
											"",
											"pm.test(\"Message field is present in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  pm.expect(responseData).to.have.property('message');",
											"});",
											"",
											"",
											"pm.test(\"Status value is 0\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.status).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/api/v1/users/user/3/follow",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"user",
										"3",
										"follow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unfollow user (id 2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Status field should exist and not be empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status).to.exist.and.to.not.be.empty;",
											"});",
											"",
											"",
											"pm.test(\"Message field should exist and be a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Message field is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/api/v1/users/user/2/unfollow",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"user",
										"2",
										"unfollow"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove follower from self (id 2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Status field exists and is truthy\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status).to.exist.and.to.be.ok;",
											"});",
											"",
											"",
											"pm.test(\"Message field should exist and not be empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.message).to.exist.and.to.not.be.empty;",
											"});",
											"",
											"",
											"pm.test(\"Message field should not be empty\", function () {",
											"  const responseData = pm.response.json();",
											"  pm.expect(responseData.message).to.exist.and.to.not.be.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/api/v1/users/user/1/remove_follower",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"user",
										"1",
										"remove_follower"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add user // test request",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"Felhasználónév1\",\r\n    \"password\" : \"Jelszó\",\r\n    \"nickname\" : \"van\",\r\n    \"role_id\" : 1,\r\n    \"email\" : \"emailcim1@email.com\",\r\n    \"isPublic\" : true,\r\n    \"profile_img\" : \"kepsrc.jpeg\",\r\n    \"bio\" : \"bio\",\r\n    \"date_of_birth\": \"2000-01-01\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/v1/users/user",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users // test request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(user) {",
									"        pm.expect(user).to.have.property('username');",
									"        pm.expect(user).to.have.property('id');",
									"        pm.expect(user).to.have.property('nickname');",
									"        pm.expect(user).to.have.property('dateOfSignup');",
									"        pm.expect(user).to.have.property('public');",
									"        pm.expect(user).to.have.property('deleted');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"DateOfSignup is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(user) {",
									"    pm.expect(user.dateOfSignup).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Bio and profileImg fields are either null or non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(user => {",
									"        pm.expect(user.bio).to.satisfy(val => val === null || typeof val === 'string' && val.length > 0, \"Bio should be either null or a non-empty string\");",
									"        pm.expect(user.profileImg).to.satisfy(val => val === null || typeof val === 'string' && val.length > 0, \"ProfileImg should be either null or a non-empty string\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Public and deleted fields should be boolean values\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(user) {",
									"        pm.expect(user.public).to.be.a('boolean');",
									"        pm.expect(user.deleted).to.be.a('boolean');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/v1/users/all",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get one user by id (id 1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the user object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.username).to.be.a('string');",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.nickname).to.be.a('string');",
									"    pm.expect(responseData.bio).to.be.null;",
									"    pm.expect(responseData.dateOfSignup).to.be.a('string');",
									"    pm.expect(responseData.profileImg).to.be.null;",
									"    pm.expect(responseData.public).to.be.true;",
									"    pm.expect(responseData.deleted).to.be.true;",
									"});",
									"",
									"",
									"pm.test(\"Date of signup is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.dateOfSignup).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"",
									"pm.test(\"Bio and profileImg are either null or non-empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.bio).to.satisfy((value) => {",
									"    return value === null || (typeof value === 'string' && value.length > 0);",
									"  }, 'Bio should be either null or a non-empty string');",
									"",
									"  pm.expect(responseData.profileImg).to.satisfy((value) => {",
									"    return value === null || (typeof value === 'string' && value.length > 0);",
									"  }, 'ProfileImg should be either null or a non-empty string');",
									"});",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the user object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.username).to.be.a('string');",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.nickname).to.be.a('string');",
									"    pm.expect(responseData.bio).to.be.null;",
									"    pm.expect(responseData.dateOfSignup).to.be.a('string');",
									"    pm.expect(responseData.profileImg).to.be.null;",
									"    pm.expect(responseData.public).to.be.true;",
									"    pm.expect(responseData.deleted).to.be.true;",
									"});",
									"",
									"",
									"pm.test(\"Date of signup is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.dateOfSignup).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"",
									"pm.test(\"Bio and profileImg are either null or non-empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.bio).to.satisfy((value) => {",
									"    return value === null || (typeof value === 'string' && value.length > 0);",
									"  }, 'Bio should be either null or a non-empty string');",
									"",
									"  pm.expect(responseData.profileImg).to.satisfy((value) => {",
									"    return value === null || (typeof value === 'string' && value.length > 0);",
									"  }, 'ProfileImg should be either null or a non-empty string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/v1/users/user/1",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"user",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete by id (id 1) // test request",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/v1/users/user/1",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"user",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user by id (id 1)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nickname\":\"updated_nickname\",\r\n    \"date_of_birth\":\"2001-09-11\",\r\n    \"bio\":\"Helló, Lenke vagyok\",\r\n    \"profile_img\": \"https://i.imgur.com/UEY1zt3.jpeg\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/v1/users/user/update/1",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"user",
								"update",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login to user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"if (response.token) {\r",
									"    pm.collectionVariables.set(\"BearerToken\", response.token)\r",
									"} else console.log(\"Bejelentkezési hiba. Regisztrálva van a felhasználó?\")",
									"pm.test(\"Response status code is 401\", function () {",
									"  pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - status and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.status).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Message should be null\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.null;",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response body is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"usernameOrEmail\":\"felhnev12\",\r\n    \"password\":\"Jelszo123!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/v1/auth/login",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"if (response.token) {\r",
									"    pm.collectionVariables.set(\"BearerToken\", response.token)\r",
									"}\r",
									"else console.log(\"Regisztrációs hiba.\")",
									"pm.test(\"Response status code is 409\", function () {",
									"  pm.expect(pm.response.code).to.equal(409);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - status and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Status field is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.status).to.be.a('number');",
									"  pm.expect(responseData.status).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"felhnev12\",\r\n    \"nickname\": \"petykes\",\r\n    \"email\": \"email@email.hu\",\r\n    \"dateOfBirth\": \"2001-09-11\",\r\n    \"password\": \"Jelszo123!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/v1/auth/register",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.have.property('token');",
									"});",
									"",
									"",
									"pm.test(\"Token is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.have.property('token');",
									"});",
									"",
									"",
									"pm.test(\"Token is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/v1/auth/authenticate",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "See own profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the user object\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.username).to.be.a('string');",
									"  pm.expect(responseData.id).to.be.a('number');",
									"  pm.expect(responseData.nickname).to.be.a('string');",
									"  pm.expect(responseData.bio).to.be.a('string');",
									"  pm.expect(responseData.dateOfSignup).to.be.a('string');",
									"  pm.expect(responseData.profileImg).to.be.null;",
									"  pm.expect(responseData.public).to.be.a('boolean');",
									"  pm.expect(responseData.deleted).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Date of Signup is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.dateOfSignup).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"",
									"pm.test(\"Deleted field is set to true\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.deleted).to.be.true;",
									"});",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the user object\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.username).to.be.a('string');",
									"  pm.expect(responseData.id).to.be.a('number');",
									"  pm.expect(responseData.nickname).to.be.a('string');",
									"  pm.expect(responseData.bio).to.be.a('string');",
									"  pm.expect(responseData.dateOfSignup).to.be.a('string');",
									"  pm.expect(responseData.profileImg).to.be.null;",
									"  pm.expect(responseData.public).to.be.a('boolean');",
									"  pm.expect(responseData.deleted).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Date of Signup is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.dateOfSignup).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"",
									"pm.test(\"Deleted field is set to true\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.deleted).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/v1/auth/profile",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update self",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the user object\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.username).to.be.a('string');",
									"  pm.expect(responseData.id).to.be.a('number');",
									"  pm.expect(responseData.nickname).to.be.a('string');",
									"  pm.expect(responseData.bio).to.be.a('string');",
									"  pm.expect(responseData.dateOfSignup).to.exist;",
									"  pm.expect(responseData.profileImg).to.be.a('string');",
									"  pm.expect(responseData.public).to.be.a('boolean');",
									"  pm.expect(responseData.deleted).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Date of Signup is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.dateOfSignup).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"",
									"pm.test(\"Deleted field should be boolean\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.deleted).to.be.a('boolean');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nickname\":\"Frissített\",\r\n    \"bio\":\"A bio frissítve lett.\",\r\n    \"profileImg\":\"placeholder.png\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/v1/users/user/update",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"user",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(user) {",
									"        pm.expect(user).to.include.keys('username', 'id', 'nickname', 'dateOfSignup', 'public', 'deleted');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Bio and profileImg fields are either null or non-empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach(function(user) {",
									"        pm.expect(user.bio).to.satisfy(function (value) {",
									"            return value === null || value !== \"\";",
									"        }, \"Bio should be either null or non-empty\");",
									"        ",
									"        pm.expect(user.profileImg).to.satisfy(function (value) {",
									"            return value === null || value !== \"\";",
									"        }, \"ProfileImg should be either null or non-empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Date of signup is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  responseData.forEach(function(user) {",
									"    pm.expect(user.dateOfSignup).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(user) {",
									"        pm.expect(user.id).to.be.a('number');",
									"        pm.expect(user.id).to.be.at.least(0, \"Id should be a non-negative integer\");",
									"    });",
									"});",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(user) {",
									"        pm.expect(user).to.include.keys('username', 'id', 'nickname', 'dateOfSignup', 'public', 'deleted');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Bio and profileImg fields are either null or non-empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach(function(user) {",
									"        pm.expect(user.bio).to.satisfy(function (value) {",
									"            return value === null || value !== \"\";",
									"        }, \"Bio should be either null or non-empty\");",
									"        ",
									"        pm.expect(user.profileImg).to.satisfy(function (value) {",
									"            return value === null || value !== \"\";",
									"        }, \"ProfileImg should be either null or non-empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Date of signup is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  responseData.forEach(function(user) {",
									"    pm.expect(user.dateOfSignup).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(user) {",
									"        pm.expect(user.id).to.be.a('number');",
									"        pm.expect(user.id).to.be.at.least(0, \"Id should be a non-negative integer\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/v1/users/search?search=u",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"search"
							],
							"query": [
								{
									"key": "search",
									"value": "u"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "posts",
			"item": [
				{
					"name": "General",
					"item": [
						{
							"name": "Delete post of user by ID (1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - status and message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('status');",
											"    pm.expect(responseData).to.have.property('message');",
											"});",
											"",
											"",
											"pm.test(\"Status is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.status).to.exist.and.to.be.a('number');",
											"  pm.expect(responseData.status).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Verify Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Ensure that the message field is either null or a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.message).to.satisfy((message) => {",
											"        return message === null || (typeof message === 'string' && message.length > 0);",
											"    }, \"Message field should be either null or a non-empty string\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/api/v1/posts/post/1",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"v1",
										"posts",
										"post",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get post by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('postId');",
											"    pm.expect(responseData).to.have.property('text');",
											"    pm.expect(responseData).to.have.property('reactionTypeMap');",
											"    pm.expect(responseData).to.have.property('dateOfCreation');",
											"    pm.expect(responseData).to.have.property('dateOfUpdate');",
											"    pm.expect(responseData).to.have.property('postType');",
											"    pm.expect(responseData).to.have.property('user');",
											"    pm.expect(responseData).to.have.property('location');",
											"    pm.expect(responseData).to.have.property('group');",
											"    pm.expect(responseData).to.have.property('relevance');",
											"    pm.expect(responseData).to.have.property('images');",
											"    pm.expect(responseData).to.have.property('comments');",
											"    pm.expect(responseData).to.have.property('reactedWith');",
											"    pm.expect(responseData).to.have.property('vehicle');",
											"    pm.expect(responseData).to.have.property('favorite');",
											"});",
											"",
											"",
											"pm.test(\"User object contains required fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.user).to.be.an('object');",
											"    pm.expect(responseData.user).to.include.all.keys('username', 'id', 'nickname', 'dateOfSignup', 'public', 'deleted');",
											"});",
											"",
											"",
											"pm.test(\"Images array should contain at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.images).to.be.an('array').that.is.not.empty;",
											"});",
											"",
											"",
											"pm.test(\"Verify the presence and content of reactionTypeMap object\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.have.property('reactionTypeMap').that.is.an('object').and.not.empty;",
											"    pm.expect(responseData.reactionTypeMap).to.have.property('FIRE').that.is.a('number');",
											"});",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('postId');",
											"    pm.expect(responseData).to.have.property('text');",
											"    pm.expect(responseData).to.have.property('reactionTypeMap');",
											"    pm.expect(responseData).to.have.property('dateOfCreation');",
											"    pm.expect(responseData).to.have.property('dateOfUpdate');",
											"    pm.expect(responseData).to.have.property('postType');",
											"    pm.expect(responseData).to.have.property('user');",
											"    pm.expect(responseData).to.have.property('location');",
											"    pm.expect(responseData).to.have.property('group');",
											"    pm.expect(responseData).to.have.property('relevance');",
											"    pm.expect(responseData).to.have.property('images');",
											"    pm.expect(responseData).to.have.property('comments');",
											"    pm.expect(responseData).to.have.property('reactedWith');",
											"    pm.expect(responseData).to.have.property('vehicle');",
											"    pm.expect(responseData).to.have.property('favorite');",
											"});",
											"",
											"",
											"pm.test(\"User object contains required fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.user).to.be.an('object');",
											"    pm.expect(responseData.user).to.include.all.keys('username', 'id', 'nickname', 'dateOfSignup', 'public', 'deleted');",
											"});",
											"",
											"",
											"pm.test(\"Images array should contain at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.images).to.be.an('array').that.is.not.empty;",
											"});",
											"",
											"",
											"pm.test(\"Verify the presence and content of reactionTypeMap object\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.have.property('reactionTypeMap').that.is.an('object').and.not.empty;",
											"    pm.expect(responseData.reactionTypeMap).to.have.property('FIRE').that.is.a('number');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/api/v1/posts/post/1",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"v1",
										"posts",
										"post",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get feed page 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response contains the 'content' array\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.content).to.exist.and.to.be.an('array');",
											"});",
											"",
											"",
											"pm.test(\"Verify that pageNumber, pageSize, totalElements, and totalPages are present in the response\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.pageNumber).to.exist;",
											"    pm.expect(responseData.pageSize).to.exist;",
											"    pm.expect(responseData.totalElements).to.exist;",
											"    pm.expect(responseData.totalPages).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Page number, page size, total elements, and total pages are non-negative integers\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    ",
											"    pm.expect(responseData.pageNumber).to.be.a('number').and.to.be.at.least(0);",
											"    pm.expect(responseData.pageSize).to.be.a('number').and.to.be.at.least(0);",
											"    pm.expect(responseData.totalElements).to.be.a('number').and.to.be.at.least(0);",
											"    pm.expect(responseData.totalPages).to.be.a('number').and.to.be.at.least(0);",
											"});",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response contains the 'content' array\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.content).to.exist.and.to.be.an('array');",
											"});",
											"",
											"",
											"pm.test(\"Verify that pageNumber, pageSize, totalElements, and totalPages are present in the response\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.pageNumber).to.exist;",
											"    pm.expect(responseData.pageSize).to.exist;",
											"    pm.expect(responseData.totalElements).to.exist;",
											"    pm.expect(responseData.totalPages).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Page number, page size, total elements, and total pages are non-negative integers\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    ",
											"    pm.expect(responseData.pageNumber).to.be.a('number').and.to.be.at.least(0);",
											"    pm.expect(responseData.pageSize).to.be.a('number').and.to.be.at.least(0);",
											"    pm.expect(responseData.totalElements).to.be.a('number').and.to.be.at.least(0);",
											"    pm.expect(responseData.totalPages).to.be.a('number').and.to.be.at.least(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/api/v1/posts/feed?page=0&time=2025-02-22T09:34:16.0203393",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"v1",
										"posts",
										"feed"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "time",
											"value": "2025-02-22T09:34:16.0203393"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update post by ID (1)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\":\"halihó halihó, üüdv 12345\",\r\n    \"location\":\"oblock\",\r\n    \"vehicleId\":1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUrl}}/api/v1/posts/post/1",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"v1",
										"posts",
										"post",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get posts by vehicle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"User object should be valid\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
											"  responseData.forEach(post => {",
											"    pm.expect(post.user).to.exist.and.to.be.an('object');",
											"    pm.expect(post.user.username).to.be.a('string');",
											"    pm.expect(post.user.id).to.be.a('number');",
											"    pm.expect(post.user.nickname).to.be.a('string');",
											"    pm.expect(post.user.bio).to.be.oneOf([null, '']);",
											"    pm.expect(post.user.dateOfSignup).to.be.a('string');",
											"    pm.expect(post.user.profileImg).to.be.a('string');",
											"    pm.expect(post.user.public).to.be.a('boolean');",
											"    pm.expect(post.user.deleted).to.be.a('boolean');",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Images array is present and contains expected number of elements\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    pm.expect(responseData).to.have.property('images');",
											"    pm.expect(responseData.images).to.be.an('array');",
											"    pm.expect(responseData.images).to.have.lengthOf(1);",
											"});",
											"",
											"",
											"pm.test(\"Validate the vehicle object properties\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
											"",
											"    responseData.forEach(function(post) {",
											"        pm.expect(post.vehicle).to.exist.and.to.be.an('object');",
											"        const vehicle = post.vehicle;",
											"",
											"        pm.expect(vehicle.manufacturer).to.be.a('string').and.to.have.lengthOf.at.least(1);",
											"        pm.expect(vehicle.model).to.be.a('string').and.to.have.lengthOf.at.least(1);",
											"        pm.expect(vehicle.type).to.be.a('string').and.to.have.lengthOf.at.least(1);",
											"        pm.expect(vehicle.horsepower).to.be.a('number');",
											"        pm.expect(vehicle.description).to.be.a('string').and.to.have.lengthOf.at.least(1);",
											"        pm.expect(vehicle.displacement).to.be.a('number');",
											"        pm.expect(vehicle.productionYear).to.be.a('number');",
											"    });",
											"});",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"User object should be valid\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
											"  responseData.forEach(post => {",
											"    pm.expect(post.user).to.exist.and.to.be.an('object');",
											"    pm.expect(post.user.username).to.be.a('string');",
											"    pm.expect(post.user.id).to.be.a('number');",
											"    pm.expect(post.user.nickname).to.be.a('string');",
											"    pm.expect(post.user.bio).to.be.oneOf([null, '']);",
											"    pm.expect(post.user.dateOfSignup).to.be.a('string');",
											"    pm.expect(post.user.profileImg).to.be.a('string');",
											"    pm.expect(post.user.public).to.be.a('boolean');",
											"    pm.expect(post.user.deleted).to.be.a('boolean');",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Images array is present and contains expected number of elements\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    pm.expect(responseData).to.have.property('images');",
											"    pm.expect(responseData.images).to.be.an('array');",
											"    pm.expect(responseData.images).to.have.lengthOf(1);",
											"});",
											"",
											"",
											"pm.test(\"Validate the vehicle object properties\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
											"",
											"    responseData.forEach(function(post) {",
											"        pm.expect(post.vehicle).to.exist.and.to.be.an('object');",
											"        const vehicle = post.vehicle;",
											"",
											"        pm.expect(vehicle.manufacturer).to.be.a('string').and.to.have.lengthOf.at.least(1);",
											"        pm.expect(vehicle.model).to.be.a('string').and.to.have.lengthOf.at.least(1);",
											"        pm.expect(vehicle.type).to.be.a('string').and.to.have.lengthOf.at.least(1);",
											"        pm.expect(vehicle.horsepower).to.be.a('number');",
											"        pm.expect(vehicle.description).to.be.a('string').and.to.have.lengthOf.at.least(1);",
											"        pm.expect(vehicle.displacement).to.be.a('number');",
											"        pm.expect(vehicle.productionYear).to.be.a('number');",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/api/v1/posts/vehicle/1",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"v1",
										"posts",
										"vehicle",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Favorite post by id 1",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/api/v1/posts/favorite/1",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"v1",
										"posts",
										"favorite",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get favorite posts by user id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the correct Content-Type header\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response body is an array\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array');",
											"});",
											"",
											"",
											"pm.test(\"Response body is empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array').that.is.empty;",
											"});",
											"",
											"",
											"pm.test(\"User ID is correctly included in the request URL\", function () {",
											"    pm.expect(pm.request.url).to.include(\"/api/v1/posts/favorites/user/52\");",
											"});",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the correct Content-Type header\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response body is an array\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array');",
											"});",
											"",
											"",
											"pm.test(\"Response body is empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array').that.is.empty;",
											"});",
											"",
											"",
											"pm.test(\"User ID is correctly included in the request URL\", function () {",
											"    pm.expect(pm.request.url).to.include(\"/api/v1/posts/favorites/user/52\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/api/v1/posts/favorites/user/52",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"v1",
										"posts",
										"favorites",
										"user",
										"52"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User Post",
					"item": [
						{
							"name": "Create post to own profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.text).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Text is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.text).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Text should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response body is in a valid JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"hello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjello nestjs\",\r\n    \"postImages\": [\r\n        {\r\n            \"url\": \"https://www.spar.hu/content/dam/sparhuwebsite/eletmod/zgy/zgy-kepek7.jpg/_jcr_content/renditions/responsive.665.499.noborder.f366774fcfdf048e.jpg\",\r\n            \"deleteHash\": \"deleteHash\"\r\n        },\r\n        {\r\n            \"url\": \"https://www.spar.hu/content/dam/sparhuwebsite/eletmod/zgy/zgy-kepek7.jpg/_jcr_content/renditions/responsive.665.499.noborder.f366774fcfdf048e.jpg\",\r\n            \"deleteHash\": \"deleteHash\"\r\n        }\r\n    ],\r\n    \"location\": \"tunyogmatolcs\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUrl}}/api/v1/posts/post/user",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"v1",
										"posts",
										"post",
										"user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all posts of user id 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the correct Content-Type header\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response body is an array\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"});",
											"",
											"",
											"pm.test(\"Response body is empty\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array').that.is.empty;",
											"});",
											"",
											"",
											"pm.test(\"Validate the endpoint URL is correct\", function () {",
											"    pm.expect(pm.request.url).to.equal(\"http://localhost:8080/api/v1/users/user/1/posts\");",
											"});",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the correct Content-Type header\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response body is an array\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"});",
											"",
											"",
											"pm.test(\"Response body is empty\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array').that.is.empty;",
											"});",
											"",
											"",
											"pm.test(\"Validate the endpoint URL is correct\", function () {",
											"    pm.expect(pm.request.url).to.equal(\"http://localhost:8080/api/v1/users/user/1/posts\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/api/v1/users/user/1/posts",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"user",
										"1",
										"posts"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Group Post",
					"item": [
						{
							"name": "Create Post to Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"PostImages array is present and contains expected number of elements\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.postImages).to.exist.and.to.be.an('array');",
											"    pm.expect(responseData.postImages).to.have.lengthOf(2);",
											"});",
											"",
											"",
											"pm.test(\"Url in postImages[0] and postImages[1] is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.postImages[0].url).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"    pm.expect(responseData.postImages[1].url).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"PostImages[0] URL format is valid\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.postImages[0].url).to.match(/^https?:\\/\\/.*/, \"URL format is valid\");",
											"});",
											"",
											"pm.test(\"PostImages[1] URL format is valid\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.postImages[1].url).to.match(/^https?:\\/\\/.*/, \"URL format is valid\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"Helló csoport poszt\",\r\n    \"postImages\": [\r\n        {\r\n            \"url\": \"placeholder.png\",\r\n            \"deleteHash\": \"deleteHash\"\r\n        },\r\n        {\r\n            \"url\": \"placeholder.png\",\r\n            \"deleteHash\": \"deleteHash\"\r\n        }\r\n    ],\r\n    \"location\": \"Helyszín\",\r\n    \"vehicleId\":1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUrl}}/api/v1/groups/group/52/post",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"v1",
										"groups",
										"group",
										"52",
										"post"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get all posts // test request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    const requiredFields = [",
									"        \"postId\", ",
									"        \"text\", ",
									"        \"reactionTypeMap\", ",
									"        \"dateOfCreation\", ",
									"        \"dateOfUpdate\", ",
									"        \"postType\", ",
									"        \"user\", ",
									"        \"location\", ",
									"        \"group\", ",
									"        \"relevance\", ",
									"        \"images\", ",
									"        \"comments\", ",
									"        \"reactedWith\", ",
									"        \"vehicle\", ",
									"        \"favorite\"",
									"    ];",
									"    ",
									"    responseData.forEach(function(item) {",
									"        requiredFields.forEach(function(field) {",
									"            pm.expect(item).to.have.property(field);",
									"        });",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Username is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(post) {",
									"        pm.expect(post.user).to.be.an('object');",
									"        pm.expect(post.user.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Images array is present and contains expected number of elements\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    pm.expect(responseData).to.have.property('images');",
									"    pm.expect(responseData.images).to.be.an('array');",
									"    pm.expect(responseData.images).to.have.lengthOf(1);",
									"});",
									"",
									"",
									"pm.test(\"Validate that the 'FIRE' reaction count is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(post) {",
									"    pm.expect(post.reactionTypeMap.FIRE).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Value should be a non-negative integer\");",
									"  });",
									"});",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    const requiredFields = [",
									"        \"postId\", ",
									"        \"text\", ",
									"        \"reactionTypeMap\", ",
									"        \"dateOfCreation\", ",
									"        \"dateOfUpdate\", ",
									"        \"postType\", ",
									"        \"user\", ",
									"        \"location\", ",
									"        \"group\", ",
									"        \"relevance\", ",
									"        \"images\", ",
									"        \"comments\", ",
									"        \"reactedWith\", ",
									"        \"vehicle\", ",
									"        \"favorite\"",
									"    ];",
									"    ",
									"    responseData.forEach(function(item) {",
									"        requiredFields.forEach(function(field) {",
									"            pm.expect(item).to.have.property(field);",
									"        });",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Username is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(post) {",
									"        pm.expect(post.user).to.be.an('object');",
									"        pm.expect(post.user.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Images array is present and contains expected number of elements\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    pm.expect(responseData).to.have.property('images');",
									"    pm.expect(responseData.images).to.be.an('array');",
									"    pm.expect(responseData.images).to.have.lengthOf(1);",
									"});",
									"",
									"",
									"pm.test(\"Validate that the 'FIRE' reaction count is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  responseData.forEach(function(post) {",
									"    pm.expect(post.reactionTypeMap.FIRE).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Value should be a non-negative integer\");",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/v1/posts/all",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"v1",
								"posts",
								"all"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "comment",
			"item": [
				{
					"name": "Add comment to post (id 1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"User object should exist and have required properties\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.user).to.exist;",
									"    pm.expect(responseData.user.username).to.be.a('string');",
									"    pm.expect(responseData.user.id).to.be.a('number');",
									"    pm.expect(responseData.user.nickname).to.be.a('string');",
									"    pm.expect(responseData.user.bio).to.be.a('string');",
									"    pm.expect(responseData.user.dateOfSignup).to.be.a('string');",
									"    pm.expect(responseData.user.profileImg).to.be.a('string');",
									"    pm.expect(responseData.user.public).to.be.a('boolean');",
									"    pm.expect(responseData.user.deleted).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Text field should not be empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.text).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Replies, reactionTypeMap, and reactedWith should be null if not present\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.not.have.property('replies');",
									"    pm.expect(responseData).to.not.have.property('reactionTypeMap');",
									"    pm.expect(responseData).to.not.have.property('reactedWith');",
									"});",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"User object should exist and have required properties\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.user).to.exist;",
									"    pm.expect(responseData.user.username).to.be.a('string');",
									"    pm.expect(responseData.user.id).to.be.a('number');",
									"    pm.expect(responseData.user.nickname).to.be.a('string');",
									"    pm.expect(responseData.user.bio).to.be.a('string');",
									"    pm.expect(responseData.user.dateOfSignup).to.be.a('string');",
									"    pm.expect(responseData.user.profileImg).to.be.a('string');",
									"    pm.expect(responseData.user.public).to.be.a('boolean');",
									"    pm.expect(responseData.user.deleted).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Text field should not be empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.text).to.exist.and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Replies, reactionTypeMap, and reactedWith should be null if not present\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.not.have.property('replies');",
									"    pm.expect(responseData).to.not.have.property('reactionTypeMap');",
									"    pm.expect(responseData).to.not.have.property('reactedWith');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\":\"Helló komment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/v1/posts/post/1/comment",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"v1",
								"posts",
								"post",
								"1",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete comment from post (id 1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - status and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"",
									"pm.test(\"Status is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.status).to.exist;",
									"    pm.expect(responseData.status).to.be.a('number');",
									"    pm.expect(responseData.status).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/v1/posts/post/comment/1",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"v1",
								"posts",
								"post",
								"comment",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reply to comment (id 1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - status and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.status).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Status is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.status).to.be.a('number');",
									"  pm.expect(responseData.status).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - status and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.status).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Status is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.status).to.be.a('number');",
									"  pm.expect(responseData.status).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\":\"Helló reply\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/v1/posts/post/comment/1/reply",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"v1",
								"posts",
								"post",
								"comment",
								"1",
								"reply"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete reply by id 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - status and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"",
									"pm.test(\"Status is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.status).to.exist;",
									"    pm.expect(responseData.status).to.be.a('number');",
									"    pm.expect(responseData.status).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - status and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"",
									"pm.test(\"Status is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.status).to.exist;",
									"    pm.expect(responseData.status).to.be.a('number');",
									"    pm.expect(responseData.status).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/v1/posts/post/comment/reply/1",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"v1",
								"posts",
								"post",
								"comment",
								"reply",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "groups",
			"item": [
				{
					"name": "Interactions",
					"item": [
						{
							"name": "Join Group by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {",
											"  pm.expect(pm.response.code).to.equal(404);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response body has the 'status' field\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.have.property('status');",
											"});",
											"",
											"",
											"pm.test(\"Response body has the 'message' field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.have.property('message');",
											"});",
											"",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
											"});",
											"pm.test(\"Response status code is 404\", function () {",
											"  pm.expect(pm.response.code).to.equal(404);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response body has the 'status' field\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.have.property('status');",
											"});",
											"",
											"",
											"pm.test(\"Response body has the 'message' field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.have.property('message');",
											"});",
											"",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/api/v1/groups/group/203/join",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"v1",
										"groups",
										"group",
										"203",
										"join"
									]
								}
							},
							"response": []
						},
						{
							"name": "Leave Group by ID",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/api/v1/groups/group/1/leave",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"v1",
										"groups",
										"group",
										"1",
										"leave"
									]
								}
							},
							"response": []
						},
						{
							"name": "handle join req",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {",
											"  pm.expect(pm.response.code).to.equal(404);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - status and message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('status');",
											"    pm.expect(responseData).to.have.property('message');",
											"});",
											"",
											"",
											"pm.test(\"Status is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.status).to.be.a('number');",
											"    pm.expect(responseData.status).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"pm.test(\"Response status code is 404\", function () {",
											"  pm.expect(pm.response.code).to.equal(404);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - status and message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('status');",
											"    pm.expect(responseData).to.have.property('message');",
											"});",
											"",
											"",
											"pm.test(\"Status is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.status).to.be.a('number');",
											"    pm.expect(responseData.status).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/api/v1/groups/handleJoinRequest/353/502/false",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"v1",
										"groups",
										"handleJoinRequest",
										"353",
										"502",
										"false"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get group members by group ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 409\", function () {",
											"  pm.expect(pm.response.code).to.equal(409);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - status and message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('status');",
											"    pm.expect(responseData).to.have.property('message');",
											"});",
											"",
											"",
											"pm.test(\"Status is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.status).to.be.a('number');",
											"    pm.expect(responseData.status).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
											"});",
											"pm.test(\"Response status code is 409\", function () {",
											"  pm.expect(pm.response.code).to.equal(409);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - status and message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('status');",
											"    pm.expect(responseData).to.have.property('message');",
											"});",
											"",
											"",
											"pm.test(\"Status is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.status).to.be.a('number');",
											"    pm.expect(responseData.status).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/api/v1/groups/group/1/members",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"v1",
										"groups",
										"group",
										"1",
										"members"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get pending users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {",
											"  pm.expect(pm.response.code).to.equal(401);",
											"});",
											"",
											"",
											"pm.test(\"Response body has the required fields - status and message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Status is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status).to.be.a('number');",
											"    pm.expect(responseData.status).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/api/v1/groups/group/1/pending",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"v1",
										"groups",
										"group",
										"1",
										"pending"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Base",
					"item": [
						{
							"name": "Create group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.id).to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Name, alias, description, bannerImage, and creationDate are non-empty strings\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"    pm.expect(responseData.alias).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Alias should not be empty\");",
											"    pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
											"    pm.expect(responseData.bannerImage).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Banner image should not be empty\");",
											"    pm.expect(responseData.creationDate).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Creation date should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Member count is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.memberCount).to.be.a('number').and.to.satisfy(count => count >= 0, \"Member count must be a non-negative integer\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"publikus teszt csoport\",\r\n    \"description\" : \"Üdv helló csoport jaj de jó\",\r\n    \"bannerImage\" : \"https://polomania.hu/images/designs/tn3/bgcolor/Petike-baba-44070.jpg\", //omittable\r\n    \"alias\": \"TESZT\", //omittable, ha nincs megadva automatikusan lesz kiadva\r\n    \"public\":true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUrl}}/api/v1/groups/group",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"v1",
										"groups",
										"group"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete group by ID (1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {",
											"  pm.expect(pm.response.code).to.equal(404);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - status and message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Status is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.status).to.be.a('number');",
											"    pm.expect(responseData.status).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/api/v1/groups/group/1",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"v1",
										"groups",
										"group",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all groups // test request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Content type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Validate the group object\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(group) {",
											"        pm.expect(group).to.be.an('object');",
											"        pm.expect(group.id).to.exist.and.to.be.a('number');",
											"        pm.expect(group.name).to.exist.and.to.be.a('string');",
											"        pm.expect(group.alias).to.exist.and.to.be.a('string');",
											"        pm.expect(group.description).to.exist.and.to.be.a('string');",
											"        pm.expect(group.bannerImage).to.exist.and.to.be.a('string');",
											"        pm.expect(group.memberCount).to.exist.and.to.be.a('number');",
											"        pm.expect(group.creationDate).to.exist.and.to.be.a('string');",
											"        pm.expect(group.public).to.exist.and.to.be.a('boolean');",
											"        pm.expect(group.member).to.exist.and.to.be.a('boolean');",
											"        pm.expect(group.validMember).to.exist.and.to.be.a('boolean');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Name, alias, description, bannerImage, and creationDate are non-empty strings\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
											"  ",
											"  responseData.forEach(function(group) {",
											"    pm.expect(group.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
											"    pm.expect(group.alias).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Alias should not be empty\");",
											"    pm.expect(group.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
											"    pm.expect(group.bannerImage).to.be.a('string').and.to.have.lengthOf.at.least(1, \"BannerImage should not be empty\");",
											"    pm.expect(group.creationDate).to.be.a('string').and.to.have.lengthOf.at.least(1, \"CreationDate should not be empty\");",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"MemberCount is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array');",
											"  responseData.forEach(function(group){",
											"    pm.expect(group.memberCount).to.be.a('number');",
											"    pm.expect(group.memberCount).to.be.at.least(0);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/api/v1/groups/all",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"v1",
										"groups",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get own groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Validate the structure of the response object\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
											"    responseData.forEach(function(group) {",
											"        pm.expect(group).to.be.an('object');",
											"        pm.expect(group).to.have.property('id');",
											"        pm.expect(group).to.have.property('name');",
											"        pm.expect(group).to.have.property('alias');",
											"        pm.expect(group).to.have.property('description');",
											"        pm.expect(group).to.have.property('bannerImage');",
											"        pm.expect(group).to.have.property('memberCount');",
											"        pm.expect(group).to.have.property('creationDate');",
											"        pm.expect(group).to.have.property('public');",
											"        pm.expect(group).to.have.property('member');",
											"        pm.expect(group).to.have.property('validMember');",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Id is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    responseData.forEach(function(group) {",
											"        pm.expect(group.id).to.be.a('number').and.to.be.at.least(0);",
											"    });",
											"});",
											"",
											"pm.test(\"Name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    responseData.forEach(function(group) {",
											"        pm.expect(group.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"    });",
											"});",
											"",
											"pm.test(\"Description is a string\", function () {",
											"    const responseData = pm.response.json();",
											"    responseData.forEach(function(group) {",
											"        pm.expect(group.description).to.be.a('string');",
											"    });",
											"});",
											"",
											"pm.test(\"MemberCount is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    responseData.forEach(function(group) {",
											"        pm.expect(group.memberCount).to.be.a('number').and.to.be.at.least(0);",
											"    });",
											"});",
											"",
											"pm.test(\"CreationDate is a valid date format\", function () {",
											"    const responseData = pm.response.json();",
											"    responseData.forEach(function(group) {",
											"        pm.expect(group.creationDate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Public, member, and validMember fields are boolean values\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    responseData.forEach(function(group) {",
											"        pm.expect(group.public).to.be.a('boolean');",
											"        pm.expect(group.member).to.be.a('boolean');",
											"        pm.expect(group.validMember).to.be.a('boolean');",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/api/v1/groups/own",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"v1",
										"groups",
										"own"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all posts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - status and message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('status');",
											"    pm.expect(responseData).to.have.property('message');",
											"});",
											"",
											"",
											"pm.test(\"Status is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/api/v1/groups/group/52/posts",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"v1",
										"groups",
										"group",
										"52",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "get messages of group by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {",
											"  pm.expect(pm.response.code).to.equal(401);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - status and message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('status');",
											"    pm.expect(responseData).to.have.property('message');",
											"});",
											"",
											"",
											"pm.test(\"Status is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.status).to.be.a('number');",
											"  pm.expect(responseData.status).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{apiUrl}}/api/v1/groups/group/1/messages",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"v1",
										"groups",
										"group",
										"1",
										"messages"
									]
								}
							},
							"response": []
						},
						{
							"name": "updateGroup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {",
											"  pm.expect(pm.response.code).to.equal(404);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - status and message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('status');",
											"    pm.expect(responseData).to.have.property('message');",
											"});",
											"",
											"",
											"pm.test(\"Status is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.status).to.be.a('number');",
											"    pm.expect(responseData.status).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is set to application/json\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\" : \"publikus modositott csoport\",\n    \"description\" : \"Üdv helló csoport jaj de jó modositva \",\n    \"bannerImage\": \"https://cdn.kisalfold.hu/2022/11/jsqzzYkeejr7QCcsWA_pJI-AYw24mK40TjViIx-CUns/fit/1200/800/no/1/aHR0cHM6Ly9jbXNjZG4uYXBwLmNvbnRlbnQucHJpdmF0ZS9jb250ZW50L2M0MjAxZjllMzZlYzQ1MmY5Njc0NGQwNjMyZDU0NzFi.jpg\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{apiUrl}}/api/v1/groups/group/52",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"api",
										"v1",
										"groups",
										"group",
										"52"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "vehicles",
			"item": [
				{
					"name": "Create Vehicle",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the vehicle object\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('manufacturer').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('model').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('type').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('horsepower').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('description').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('displacement').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('productionYear').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('owner').that.is.an('object');",
									"    pm.expect(responseData.owner).to.have.property('username').that.is.a('string');",
									"    pm.expect(responseData.owner).to.have.property('id').that.is.a('number');",
									"    pm.expect(responseData.owner).to.have.property('nickname').that.is.a('string');",
									"    pm.expect(responseData.owner).to.have.property('bio').that.is.a('string');",
									"    pm.expect(responseData.owner).to.have.property('dateOfSignup').that.is.a('string');",
									"    pm.expect(responseData.owner).to.have.property('profileImg').that.is.a('string');",
									"    pm.expect(responseData.owner).to.have.property('public').that.is.a('boolean');",
									"    pm.expect(responseData.owner).to.have.property('deleted').that.is.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Horsepower is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.horsepower).to.be.a('number');",
									"    pm.expect(responseData.horsepower).to.be.at.least(0, \"Horsepower should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Owner object should have required properties\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.owner).to.exist;",
									"  pm.expect(responseData.owner).to.be.an('object');",
									"  pm.expect(responseData.owner.username).to.be.a('string');",
									"  pm.expect(responseData.owner.id).to.be.a('number');",
									"  pm.expect(responseData.owner.nickname).to.be.a('string');",
									"  pm.expect(responseData.owner.bio).to.be.a('string');",
									"  pm.expect(responseData.owner.dateOfSignup).to.be.a('string');",
									"  pm.expect(responseData.owner.profileImg).to.be.a('string');",
									"  pm.expect(responseData.owner.public).to.be.a('boolean');",
									"  pm.expect(responseData.owner.deleted).to.be.a('boolean');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"manufacturer\":\"Lexus\",\r\n    \"model\" : \"RC F\",\r\n    \"type\" : \"COUPE\",\r\n    \"horsepower\": 472,\r\n    \"description\" : \"csodás autó\",\r\n    \"displacement\" : 50,\r\n    \"productionYear\": 2025\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/v1/vehicles/vehicle/create",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"v1",
								"vehicles",
								"vehicle",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Own Vehicles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the structure of the 'vehicles' array\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach(function(vehicle) {",
									"        pm.expect(vehicle).to.be.an('object');",
									"        pm.expect(vehicle).to.have.property('id').that.is.a('number');",
									"        pm.expect(vehicle).to.have.property('manufacturer').that.is.a('string');",
									"        pm.expect(vehicle).to.have.property('model').that.is.a('string');",
									"        pm.expect(vehicle).to.have.property('type').that.is.a('string');",
									"        pm.expect(vehicle).to.have.property('horsepower').that.is.a('number');",
									"        pm.expect(vehicle).to.have.property('description').that.is.a('string');",
									"        pm.expect(vehicle).to.have.property('displacement').that.is.a('number');",
									"        pm.expect(vehicle).to.have.property('productionYear').that.is.a('number');",
									"        pm.expect(vehicle).to.have.property('owner').that.is.an('object');",
									"        pm.expect(vehicle.owner).to.have.property('username').that.is.a('string');",
									"        pm.expect(vehicle.owner).to.have.property('id').that.is.a('number');",
									"        pm.expect(vehicle.owner).to.have.property('nickname').that.is.a('string');",
									"        pm.expect(vehicle.owner).to.have.property('bio').that.is.a('string');",
									"        pm.expect(vehicle.owner).to.have.property('dateOfSignup').that.is.a('string');",
									"        pm.expect(vehicle.owner).to.have.property('profileImg').that.is.a('string');",
									"        pm.expect(vehicle.owner).to.have.property('public').that.is.a('boolean');",
									"        pm.expect(vehicle.owner).to.have.property('deleted').that.is.a('boolean');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Owner object should exist in the response\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  ",
									"  responseData.forEach(function(vehicle) {",
									"    pm.expect(vehicle.owner).to.exist.and.to.be.an('object');",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Horsepower, displacement, and productionYear are non-negative integers\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(vehicle) {",
									"        pm.expect(vehicle.horsepower).to.be.a('number').and.to.be.at.least(0);",
									"        pm.expect(vehicle.displacement).to.be.a('number').and.to.be.at.least(0);",
									"        pm.expect(vehicle.productionYear).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/v1/vehicles/own",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"v1",
								"vehicles",
								"own"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update own vehicle by ID (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {",
									"    pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - status and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('status');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"",
									"pm.test(\"Status is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.status).to.exist;",
									"    pm.expect(responseData.status).to.be.a('number');",
									"    pm.expect(responseData.status).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"horsepower\": 17,\r\n    \"productionYear\": 1990\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/v1/vehicles/vehicle/1",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"v1",
								"vehicles",
								"vehicle",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all vehicles of user by ID (1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Id field is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(vehicle) {",
									"        pm.expect(vehicle.id).to.be.a('number');",
									"        pm.expect(vehicle.id).to.be.at.least(0);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Manufacturer, model, type, and description fields are non-empty strings\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"  ",
									"  responseData.forEach(function(vehicle) {",
									"    pm.expect(vehicle.manufacturer).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Manufacturer should not be empty\");",
									"    pm.expect(vehicle.model).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Model should not be empty\");",
									"    pm.expect(vehicle.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");",
									"    pm.expect(vehicle.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"Validate the owner object with non-empty username, nickname, and dateOfSignup fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(function(vehicle) {",
									"        pm.expect(vehicle.owner).to.be.an('object');",
									"        pm.expect(vehicle.owner.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
									"        pm.expect(vehicle.owner.nickname).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nickname should not be empty\");",
									"        pm.expect(vehicle.owner.dateOfSignup).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Date of signup should not be empty\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/v1/vehicles/user/1/all",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"v1",
								"vehicles",
								"user",
								"1",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Vehicle by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {",
									"  pm.expect(pm.response.code).to.equal(401);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - status and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.status).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the status field is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.status).to.be.a('number').and.to.satisfy((status) => status >= 0, \"Status should be a non-negative integer\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/v1/vehicles/vehicle/1",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"v1",
								"vehicles",
								"vehicle",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reactions",
			"item": [
				{
					"name": "React to POST of ID 1 with 🔥",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - reactionType and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.reactionType).to.exist;",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"ReactionType is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  pm.expect(responseData.reactionType).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ReactionType should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/v1/posts/post/1/addOrRemoveReaction/FIRE",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"v1",
								"posts",
								"post",
								"1",
								"addOrRemoveReaction",
								"FIRE"
							]
						}
					},
					"response": []
				},
				{
					"name": "React to COMMENT of ID 1 with 🔥",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Status field is present in the response\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.have.property('status');",
									"});",
									"",
									"",
									"pm.test(\"Message field is present in the response\", function () {",
									"  const responseData = pm.response.json();",
									"  pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Status field value is a number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.status).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/v1/posts/comment/1/addOrRemoveReaction/FIRE",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"v1",
								"posts",
								"comment",
								"1",
								"addOrRemoveReaction",
								"FIRE"
							]
						}
					},
					"response": []
				},
				{
					"name": "React to REPLY of ID 1 with 🔥",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"  pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - status and message\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('status');",
									"  pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"",
									"pm.test(\"Status is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.status).to.be.a('number');",
									"    pm.expect(responseData.status).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/v1/posts/reply/1/addOrRemoveReaction/FIRE",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"v1",
								"posts",
								"reply",
								"1",
								"addOrRemoveReaction",
								"FIRE"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "events",
			"item": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "apiUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "BearerToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "csrfToken",
			"value": "",
			"type": "string"
		}
	]
}